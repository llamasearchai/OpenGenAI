{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#opengenai","title":"OpenGenAI","text":"<p>Advanced AI Agent Platform using OpenAI Agents SDK</p> <p> </p> <p>OpenGenAI is a cutting-edge, production-ready AI platform that leverages OpenAI's Agents SDK to create autonomous, intelligent agents for enterprise applications. Built with modern Python, FastAPI, and async architecture, it provides a comprehensive framework for developing, deploying, and managing AI agents at scale.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Autonomous Agent Development: Build self-directed AI agents using OpenAI's latest SDK</li> <li>Enterprise Integration: Native support for business systems and APIs</li> <li>Scalable Architecture: Microservices-based, cloud-native design</li> <li>Comprehensive Testing: Full test coverage with pytest, tox, and hatch</li> <li>Production Ready: Complete CI/CD, monitoring, and deployment automation</li> <li>Rich CLI Interface: Professional command-line tools with rich terminal UI</li> <li>RESTful API: Full-featured FastAPI application with OpenAPI documentation</li> <li>Advanced Monitoring: Prometheus metrics, distributed tracing, structured logging</li> <li>Security First: JWT authentication, rate limiting, comprehensive input validation</li> <li>Docker Support: Complete containerization and orchestration support</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<pre><code>pip install opengenai\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code>from opengenai import AgentManager, AgentConfig\n\n# Create an agent configuration\nconfig = AgentConfig(\n    name=\"ResearchAgent\",\n    description=\"Specialized agent for research tasks\",\n    capabilities=[\"reasoning\", \"planning\", \"execution\"],\n    model=\"gpt-4-turbo-preview\"\n)\n\n# Initialize agent manager\nmanager = AgentManager()\n\n# Create and run an agent\nagent_id = await manager.create_agent(\"research\", config)\nresult = await manager.run_agent(\"research\", {\"query\": \"Latest AI trends\"})\n</code></pre>"},{"location":"#cli-usage","title":"CLI Usage","text":"<pre><code># Initialize the environment\nopengenai init\n\n# Start the API server\nopengenai serve --host 0.0.0.0 --port 8000\n\n# Create an agent\nopengenai agent create --name CodeAgent --config agent_config.json\n\n# Run an agent\nopengenai agent run --name CodeAgent --input task.json\n\n# List all agents\nopengenai agent list\n\n# Check system status\nopengenai health\n</code></pre>"},{"location":"#quick-demo","title":"Quick Demo","text":"<p>Run the included demonstration to see OpenGenAI in action:</p> <pre><code># Clone the repository\ngit clone https://github.com/nikjois/opengenai.git\ncd opengenai\n\n# Run the demo\npython simple_demo.py\n</code></pre> <p>This will demonstrate: - Agent creation and management - Task execution with different agent types - System health monitoring - Complete CLI interface</p>"},{"location":"#system-architecture","title":"System Architecture","text":"<pre><code>graph TB\n    CLI[CLI Interface] --&gt; API[FastAPI Application]\n    API --&gt; Agent[Agent Manager]\n    Agent --&gt; Base[Base Agent Classes]\n    Base --&gt; Specialized[Specialized Agents]\n    Specialized --&gt; OpenAI[OpenAI SDK]\n\n    API --&gt; Database[(PostgreSQL)]\n    API --&gt; Cache[(Redis)]\n    API --&gt; Queue[Task Queue]\n\n    Monitor[Monitoring] --&gt; Metrics[Prometheus]\n    Monitor --&gt; Tracing[Jaeger]\n    Monitor --&gt; Logs[Structured Logging]\n\n    Deploy[Deployment] --&gt; Docker[Docker Containers]\n    Deploy --&gt; K8s[Kubernetes]\n    Deploy --&gt; Cloud[Cloud Platforms]\n</code></pre>"},{"location":"#configuration","title":"Configuration","text":"<p>OpenGenAI uses environment variables and configuration files for setup:</p>"},{"location":"#environment-variables","title":"Environment Variables","text":"<pre><code># OpenAI Configuration\nOPENAI_API_KEY=your-api-key-here\nOPENAI_MODEL=gpt-4-turbo-preview\n\n# Database Configuration\nDATABASE_URL=postgresql://user:password@localhost/opengenai\n\n# Redis Configuration\nREDIS_URL=redis://localhost:6379/0\n\n# Security Configuration\nSECURITY_SECRET_KEY=your-secret-key-here\n\n# API Configuration\nAPI_HOST=0.0.0.0\nAPI_PORT=8000\n\n# Monitoring Configuration\nMONITORING_METRICS_ENABLED=true\nMONITORING_TRACING_ENABLED=true\n</code></pre>"},{"location":"#configuration-file","title":"Configuration File","text":"<p>Create a <code>.env</code> file in your project root:</p> <pre><code>OPENAI_API_KEY=sk-your-api-key-here\nDATABASE_URL=postgresql://user:password@localhost/opengenai\nREDIS_URL=redis://localhost:6379/0\nSECURITY_SECRET_KEY=your-secret-key-here\nENVIRONMENT=development\nDEBUG=true\n</code></pre>"},{"location":"#agent-types","title":"Agent Types","text":""},{"location":"#base-agent","title":"Base Agent","text":"<p>The foundation for all agents with core capabilities: - State management - Memory and context handling - Inter-agent communication - Self-reflection and improvement</p>"},{"location":"#specialized-agents","title":"Specialized Agents","text":""},{"location":"#research-agent","title":"Research Agent","text":"<pre><code>from opengenai.agents.specialized import ResearchAgent\n\nagent = ResearchAgent()\nresult = await agent.execute({\n    \"query\": \"AI safety research\",\n    \"depth\": \"comprehensive\",\n    \"sources\": [\"academic\", \"industry\"]\n})\n</code></pre>"},{"location":"#code-agent","title":"Code Agent","text":"<pre><code>from opengenai.agents.specialized import CodeAgent\n\nagent = CodeAgent()\nresult = await agent.execute({\n    \"task_description\": \"Create a REST API endpoint\",\n    \"language\": \"python\",\n    \"requirements\": [\"FastAPI\", \"async support\"]\n})\n</code></pre>"},{"location":"#analysis-agent","title":"Analysis Agent","text":"<pre><code>from opengenai.agents.specialized import AnalysisAgent\n\nagent = AnalysisAgent()\nresult = await agent.execute({\n    \"data\": data_frame,\n    \"analysis_type\": \"statistical\",\n    \"output_format\": \"report\"\n})\n</code></pre>"},{"location":"#api-endpoints","title":"API Endpoints","text":""},{"location":"#agent-management","title":"Agent Management","text":"<pre><code>POST /api/v1/agents\nGET /api/v1/agents/{agent_id}\nPUT /api/v1/agents/{agent_id}\nDELETE /api/v1/agents/{agent_id}\nGET /api/v1/agents\n</code></pre>"},{"location":"#task-management","title":"Task Management","text":"<pre><code>POST /api/v1/tasks\nGET /api/v1/tasks/{task_id}\nPUT /api/v1/tasks/{task_id}\nDELETE /api/v1/tasks/{task_id}\nGET /api/v1/tasks\n</code></pre>"},{"location":"#health-and-monitoring","title":"Health and Monitoring","text":"<pre><code>GET /api/health\nGET /api/health/detailed\nGET /api/metrics\n</code></pre>"},{"location":"#performance-metrics","title":"Performance Metrics","text":"<ul> <li>Response Time: &lt; 100ms for API endpoints</li> <li>Agent Execution: &lt; 30s for standard tasks</li> <li>Throughput: 1000+ requests/minute</li> <li>Memory Usage: &lt; 500MB per agent</li> <li>Concurrent Agents: 100+ agents supported</li> </ul>"},{"location":"#development","title":"Development","text":""},{"location":"#setup-development-environment","title":"Setup Development Environment","text":"<pre><code># Clone the repository\ngit clone https://github.com/nikjois/opengenai.git\ncd opengenai\n\n# Create virtual environment\npython -m venv venv\nsource venv/bin/activate\n\n# Install development dependencies\npip install -e \".[dev]\"\n\n# Install pre-commit hooks\npre-commit install\n\n# Run tests\nhatch run test\n\n# Run linting\nhatch run lint\n\n# Format code\nhatch run fmt\n</code></pre>"},{"location":"#testing","title":"Testing","text":"<pre><code># Run all tests\nhatch run test\n\n# Run unit tests only\nhatch run test-unit\n\n# Run integration tests\nhatch run test-integration\n\n# Run with coverage\nhatch run test-cov\n\n# Run performance benchmarks\nhatch run test-benchmark\n</code></pre>"},{"location":"#using-tox","title":"Using tox","text":"<pre><code># Run tests across Python versions\ntox\n\n# Run specific environment\ntox -e py311\n\n# Run linting\ntox -e lint\n\n# Run type checking\ntox -e type\n</code></pre>"},{"location":"#security","title":"Security","text":"<p>OpenGenAI implements comprehensive security measures:</p> <ul> <li>Authentication: JWT-based authentication system</li> <li>Authorization: Role-based access control</li> <li>Rate Limiting: Configurable rate limits per endpoint</li> <li>Input Validation: Comprehensive request validation</li> <li>Security Headers: HSTS, CSP, and other security headers</li> <li>Encryption: At-rest and in-transit encryption</li> <li>Audit Logging: Complete audit trail of all actions</li> </ul>"},{"location":"#deployment","title":"Deployment","text":""},{"location":"#docker-deployment","title":"Docker Deployment","text":"<pre><code># Build the image\ndocker build -t opengenai:latest .\n\n# Run the container\ndocker run -p 8000:8000 opengenai:latest\n\n# Use Docker Compose\ndocker-compose up -d\n</code></pre>"},{"location":"#kubernetes-deployment","title":"Kubernetes Deployment","text":"<pre><code># Deploy to Kubernetes\nkubectl apply -f deploy/kubernetes/\n\n# Check deployment status\nkubectl get pods -n opengenai\n</code></pre>"},{"location":"#cloud-deployment","title":"Cloud Deployment","text":"<p>Supports deployment to major cloud providers:</p> <ul> <li>AWS: ECS, EKS, Lambda</li> <li>Azure: ACI, AKS, Functions</li> <li>GCP: Cloud Run, GKE, Cloud Functions</li> <li>Digital Ocean: App Platform, Kubernetes</li> </ul>"},{"location":"#monitoring","title":"Monitoring","text":""},{"location":"#metrics-collection","title":"Metrics Collection","text":"<p>OpenGenAI provides comprehensive monitoring:</p> <ul> <li>Application Metrics: Request rates, response times, error rates</li> <li>System Metrics: CPU, memory, disk usage</li> <li>Agent Metrics: Execution times, success rates, resource usage</li> <li>Business Metrics: Task completion rates, user satisfaction</li> </ul>"},{"location":"#observability-stack","title":"Observability Stack","text":"<ul> <li>Prometheus: Metrics collection and storage</li> <li>Jaeger: Distributed tracing</li> <li>Grafana: Visualization and dashboards</li> <li>Structured Logging: JSON-formatted logs with correlation IDs</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! Please see our Contributing Guide for details.</p>"},{"location":"#development-process","title":"Development Process","text":"<ol> <li>Fork the repository</li> <li>Create a feature branch</li> <li>Make your changes</li> <li>Add tests for your changes</li> <li>Run the test suite</li> <li>Submit a pull request</li> </ol>"},{"location":"#code-standards","title":"Code Standards","text":"<ul> <li>Follow PEP 8 and use black for formatting</li> <li>Add type hints to all functions</li> <li>Write comprehensive tests</li> <li>Update documentation</li> <li>Use conventional commits</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"#support","title":"Support","text":"<ul> <li>Documentation: https://opengenai.llamasearch.ai</li> <li>Issues: GitHub Issues</li> <li>Discussions: GitHub Discussions</li> <li>Email: nikjois@llamasearch.ai</li> </ul>"},{"location":"#roadmap","title":"Roadmap","text":"<ul> <li>[ ] Advanced agent clustering and coordination</li> <li>[ ] Multi-modal agent support (vision, audio)</li> <li>[ ] Agent marketplace and plugin system</li> <li>[ ] Advanced analytics and insights</li> <li>[ ] Enterprise single sign-on integration</li> <li>[ ] Multi-tenant architecture</li> <li>[ ] Edge deployment support</li> <li>[ ] Advanced workflow orchestration</li> </ul> <p>Built with excellence for the AI community by Nik Jois</p>"},{"location":"#status","title":"Status","text":"<p>OpenGenAI is a production-ready platform with a complete agent implementation, professional CLI, full REST API, comprehensive testing, and robust deployment options. The package is fully documented and ready for distribution. </p>"}]}