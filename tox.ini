[tox]
requires = tox>=4
env_list = py{311,312}, lint, type, security, docs
minversion = 4.11.0
isolated_build = true

[testenv]
description = run unit tests
passenv = 
    TOXPYTHON
    CI
    GITHUB_*
setenv =
    PYTHONPATH = {toxinidir}/src
    TESTING = 1
    ENVIRONMENT = testing
    COVERAGE_FILE = {toxworkdir}/.coverage.{envname}
deps =
    pytest>=7.4.0
    pytest-asyncio>=0.21.0
    pytest-cov>=4.1.0
    pytest-mock>=3.12.0
    pytest-xdist>=3.5.0
    pytest-timeout>=2.2.0
    hypothesis>=6.92.0
    faker>=20.1.0
    factory-boy>=3.3.0
    responses>=0.24.0
    freezegun>=1.3.0
    -r{toxinidir}/requirements/test.txt
commands =
    pytest {posargs:tests/unit} --cov=opengenai --cov-report=term-missing --cov-report=xml --cov-report=html

[testenv:py{311,312}-integration]
description = run integration tests
setenv =
    {[testenv]setenv}
    INTEGRATION_TESTS = 1
deps = {[testenv]deps}
commands =
    pytest {posargs:tests/integration} -m integration --cov=opengenai --cov-append

[testenv:py{311,312}-e2e]
description = run end-to-end tests
setenv =
    {[testenv]setenv}
    E2E_TESTS = 1
deps = {[testenv]deps}
commands =
    pytest {posargs:tests/e2e} -m e2e --timeout=600

[testenv:py{311,312}-benchmark]
description = run benchmark tests
deps = 
    {[testenv]deps}
    pytest-benchmark>=4.0.0
commands =
    pytest {posargs:tests} -m benchmark --benchmark-only

[testenv:lint]
description = run linters
skip_install = true
deps =
    black>=23.12.0
    ruff>=0.1.0
commands =
    black --check {posargs:src tests scripts}
    ruff check {posargs:src tests scripts}

[testenv:fmt]
description = format code
skip_install = true
deps =
    black>=23.12.0
    ruff>=0.1.0
commands =
    black {posargs:src tests scripts}
    ruff check --fix {posargs:src tests scripts}

[testenv:type]
description = run type checks
deps =
    mypy>=1.7.0
    types-redis
    types-passlib
    types-python-jose
    types-aiofiles
    types-requests
commands =
    mypy {posargs:src/opengenai}

[testenv:security]
description = run security checks
deps =
    bandit[toml]>=1.7.5
    safety>=3.0.0
    semgrep>=1.45.0
commands =
    bandit -r src/opengenai -f json -o {toxworkdir}/bandit-report.json
    bandit -r src/opengenai
    safety check --json --output {toxworkdir}/safety-report.jsonsafety check

[testenv:docs]
description = build documentation
deps =
    mkdocs>=1.5.0
    mkdocs-material>=9.5.0
    mkdocstrings[python]>=0.24.0
    mkdocs-mermaid2-plugin>=1.1.0
commands =
    mkdocs build --clean

[testenv:docs-serve]
description = serve documentation locally
deps = {[testenv:docs]deps}
commands =
    mkdocs serve

[testenv:coverage]
description = generate coverage report
deps =
    {[testenv]deps}
    coverage[toml]>=7.3.0
commands =
    coverage run -m pytest
    coverage combine
    coverage report --show-missing
    coverage html
    coverage xml

[testenv:clean]
description = clean build artifacts
skip_install = true
allowlist_externals = 
    rm
    find
commands =
    rm -rf build dist .eggs *.egg-info
    rm -rf htmlcov .coverage .coverage.*
    rm -rf .pytest_cache .mypy_cache .tox
    find . -type d -name __pycache__ -exec rm -rf {} +
    find . -type f -name "*.pyc" -delete

[gh-actions]
python =
    3.11: py311, lint, type, security
    3.12: py312
