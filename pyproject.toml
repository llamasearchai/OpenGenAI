[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "opengenai"
version = "1.0.0"
description = "OpenGenAI - Advanced AI Agent Platform using OpenAI Agents SDK"
readme = "README.md"
requires-python = ">=3.11"
license = "MIT"
authors = [
    { name = "Nik Jois", email = "nikjois@llamasearch.ai" },
]
keywords = [
    "ai",
    "agents",
    "openai",
    "autonomous",
    "enterprise",
    "fastapi",
    "async",
    "production",
    "sdk",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Environment :: Web Environment",
    "Framework :: FastAPI",
    "Framework :: AsyncIO",
    "Operating System :: OS Independent",
]

dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "openai>=1.3.0",
    "httpx>=0.25.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "redis>=5.0.0",
    "celery>=5.3.0",
    "asyncpg>=0.29.0",
    "aiofiles>=23.2.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "prometheus-client>=0.19.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-instrumentation-fastapi>=0.42b0",
    "structlog>=23.2.0",
    "typer[all]>=0.9.0",
    "rich>=13.7.0",
    "tenacity>=8.2.0",
    "numpy>=1.26.0",
    "pandas>=2.1.0",
    "scikit-learn>=1.3.0",
    "langchain>=0.1.0",
    "chromadb>=0.4.0",
    "python-dotenv>=1.0.0",
    "psutil>=5.9.0",
    "websockets>=12.0",
    "aioredis>=2.0.0",
    "asyncio-mqtt>=0.16.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "pytest-benchmark>=4.0.0",
    "pytest-timeout>=2.2.0",
    "pytest-env>=1.1.0",
    "black>=23.12.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.6.0",
    "ipython>=8.18.0",
    "ipdb>=0.13.0",
    "jupyter>=1.0.0",
]
test = [
    "tox>=4.11.0",
    "coverage[toml]>=7.3.0",
    "hypothesis>=6.92.0",
    "faker>=20.1.0",
    "factory-boy>=3.3.0",
    "responses>=0.24.0",
    "freezegun>=1.3.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.24.0",
    "mkdocs-mermaid2-plugin>=1.1.0",
]
security = [
    "bandit[toml]>=1.7.5",
    "safety>=3.0.0",
    "semgrep>=1.45.0",
]
prod = [
    "gunicorn>=21.2.0",
    "gevent>=23.9.0",
    "sentry-sdk[fastapi]>=1.38.0",
    "newrelic>=9.2.0",
]

[project.urls]
Homepage = "https://github.com/nikjois/opengenai"
Documentation = "https://opengenai.llamasearch.ai"
Repository = "https://github.com/nikjois/opengenai"
Issues = "https://github.com/nikjois/opengenai/issues"
Changelog = "https://github.com/nikjois/opengenai/releases"

[project.scripts]
opengenai = "opengenai.cli.main:app"

[tool.hatch.version]
path = "src/opengenai/__version__.py"

[tool.hatch.build.sources]
"src" = "src"

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/requirements",
    "/scripts",
    "/docker",
    "/deploy",
    "LICENSE",
    "README.md",
    "CHANGELOG.md",
]

[tool.hatch.build.targets.wheel]
packages = ["opengenai"]

[tool.hatch.envs.default]
dependencies = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "black>=23.12.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "rich>=13.7.0",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov=opengenai --cov-report=term-missing --cov-report=html --cov-report=xml {args:tests}"
test-unit = "pytest tests/unit -v"
test-integration = "pytest tests/integration -v -m integration"
test-e2e = "pytest tests/e2e -v -m e2e"
test-parallel = "pytest -n auto {args:tests}"
test-benchmark = "pytest --benchmark-only {args:tests}"
lint = [
    "black --check {args:.}",
    "ruff check {args:.}",
    "mypy {args:src/opengenai}",
]
fmt = [
    "black {args:.}",
    "ruff check --fix {args:.}",
]
all = [
    "fmt",
    "lint", 
    "test-cov",
]
clean = [
    "rm -rf build dist .eggs *.egg-info",
    "rm -rf htmlcov .coverage .coverage.*",
    "rm -rf .pytest_cache .mypy_cache",
    "find . -type d -name __pycache__ -exec rm -rf {} +",
]

[tool.black]
target-version = ["py311"]
line-length = 100
skip-string-normalization = true

[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
    "N",  # pep8-naming
    "S",  # bandit
    "A",  # flake8-builtins
    "T20", # flake8-print
]
ignore = [
    "E501",  # line too long
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "S101",  # assert used
    "S603",  # subprocess call
    "S607",  # subprocess call
    "B904",  # require raise from err (allow simpler re-raise)
    "W293",  # blank line with whitespace inside docstrings
    "B007",  # loop variable unused
    "S110",  # try-except-pass
    "S104",  # binding to all interfaces
    "E722",  # bare except
    "N818",  # exception naming
    "F841",  # local variable assigned but not used
    "UP035",  # typing deprecated alias
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**" = ["S101", "S106", "S602", "S603", "S607"]

[tool.ruff.isort]
known-third-party = ["fastapi", "pydantic", "openai", "sqlalchemy", "redis", "celery"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true

[[tool.mypy.overrides]]
module = [
    "chromadb.*",
    "langchain.*",
    "openai.*",
    "prometheus_client.*",
    "structlog.*",
    "tenacity.*",
    "typer.*",
    "rich.*",
    "celery.*",
    "redis.*",
    "aioredis.*",
    "asyncio_mqtt.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["opengenai/tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
    "benchmark: marks tests as benchmark tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source_pkgs = ["opengenai"]
branch = true
parallel = true
omit = [
    "src/opengenai/__version__.py",
    "tests/*",
    "scripts/*",
]

[tool.coverage.paths]
opengenai = ["src/opengenai", "*/opengenai/src/opengenai"]
tests = ["tests", "*/opengenai/tests"]

[tool.coverage.report]
exclude_lines = [
    "no cov",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "raise NotImplementedError",
    "pragma: no cover",
]
precision = 2
show_missing = true
skip_covered = false

[tool.bandit]
exclude_dirs = ["tests", "scripts"]
skips = ["B101", "B601"]

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"] 